#!/bin/sh
alias a='alias'
alias c='clear'
alias ..='cd ..'

# Git
alias gs='git status'
alias gl='git log'
alias ga='git add'
alias gaa='git add .'
alias gd='git diff'
alias gdc='git diff --cached'
alias gb='git branch'
alias gc='git commit'
alias gcm='git commit --message'
alias git-reset-last='git reset --soft HEAD~1'
alias git-conflicts='git diff --name-only --diff-filter=U'
alias git-ignore='git update-index --assume-unchanged $1'

# Use tig for 'git log'
git() {
  if [[ $@ == "log" ]]; then
    command tig
  elif [[ $1 == "checkout" ]]; then
    # ---
    # Experimental
    # Auto revert any migration when performing git checkout
    # This assumes that all migration are reversible
    # 1. Checks if current directory is a rails project
    # 2. Compares db/migrate of HEAD and the other branch
    # 3. Execute bundle exec rake db:migrate:down for each version
    # 4. Execute git checkout -- . db/schema.rb
    # 5. Proceed with git checkout
    # ---
    # TODO
    # 1. REFACTOR - AVOID NESTED CONDITIONALS
    # ---

    can_git_checkout() {
      git diff --shortstat
    }
    if ! [[ $(can_git_checkout) ]]; then
      # Check if git branch is exist
      git rev-parse --verify $2 &> /dev/null
      if [[ $? -eq 0 ]]; then
        # Check if current dir is a rails project
        grep 'rails' 'Gemfile' -s > /dev/null
        if [[ $? -eq 0 ]]; then
          if [ -d "db/migrate" ]; then
            # Get all migration ids
            versions="$(git diff --name-only `git rev-parse --abbrev-ref $2...HEAD` db/migrate | grep -oE '\d{14}' )"
            # Revert starting from latest migration
            versions="$(echo $versions | awk '{ for (i=NF; i>1; i--) printf("%s ",$i); print $1; }')"
            for version in $versions; do
              echo "Running bundle exec rake db:migrate:down VERSION=$version"
              bundle exec rake db:migrate:down VERSION=$version > /dev/null
            done
            git checkout -- . db/schema.rb
          fi
        fi
      fi
    fi
    command git "$@"
  elif [[ $@ == "stash apply" ]]; then
    echo "Use git stash pop!"
  else
    command git "$@"
  fi
}

# Search history
alias hs='history | grep $1'

# Elixir / Phoenix
alias phx='iex -S mix phx.server'

# Ruby / Rails
alias sidekiq='bundle exec sidekiq'
alias rspec='bundle exec rspec'

rake() {
  if [[ $@ == "routes" ]]; then
    eval "bundle exec rake routes"
  else
    command rake "$@"
  fi
}

# Vim
alias v='vim'
vi() {
  vim
}
